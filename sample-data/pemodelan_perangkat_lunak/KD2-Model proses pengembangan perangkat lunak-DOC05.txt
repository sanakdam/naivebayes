Model Proses Pengembangan Software Model Proses Pengembangan Software 1.    Waterfall 1.1   Pengertian Waterfall atau Air terjun adalah model yang dikembangkan untuk pengembangan perangkat lunak atau pembuatan perangkat lunak. Model berkembang secara sistematis dari satu tahap ke tahap lain dalam mode seperti air terjun. 1.1  Diagram Waterfall 1.2   Proses / Cara Kerja a.    Analisa Kebutuhan Seluruh kebutuhan software harus bisa didapatkan dalam fase ini, termasuk didalamnya kegunaan software yang diharapkan pengguna dan batasan software. Informasi ini biasanya dapat diperoleh melalui wawancara, survey atau diskusi. Informasi tersebut dianalisis untuk mendapatkan dokumentasi kebutuhan pengguna untuk digunakan pada tahap selanjutnya. b.   Desain Sistem Tahap ini dilakukan sebelum melakukan penulisan kode program (coding). Tahap ini bertujuan untuk memberikan gambaran apa yang seharusnya dikerjakan dan bagaimana tampilannya. Tahap ini membantu dalam menspesifikasikan kebutuhan hardware dan sistem serta mendefinisikan arsitektur sistem secara keseluruhan. c.    Penulisan Kode Program Dalam tahap ini dilakukan pemrograman. Pembuatan software dipecah menjadi modul-modul kecil yang nantinya akan digabungkan dalam tahap berikutnya. Selain itu dalam tahap ini juga dilakukan pemeriksaaan terhadap modul yang dibuat, apakah sudah memenuhi fungsi yang diinginkan atau belum. d.   Pengujian Program Di tahap ini dilakukan penggabungan modul-modul yang sudah dibuat dan dilakukan pengujian. Ini dilakukan untuk mengetahui apakah software yang dibuat telah sesuai dengan desainnya dan masih terdapat kesalahan atau tidak. e.    Penerapan Program Ini merupakan tahap terakhir dalam model waterfall. Software yang sudah jadi dijalankan serta dilakukan pemeliharaan. Pemeliharaan termasuk dalam memperbaiki  kesalahan yang tidak ditemukan pada langkah sebelumnya. Perbaikan implementasi unit sistem dan peningkatan jasa sistem sebagai kebutuhan baru. 1.3   Keuntungan Waterfall -  Merupakan model pengembangan paling handal dan paling lama digunakan. -  Cocok untuk sistem software berskalabesar. -  Cocok untuk sistem software yang bersifat generik. -  Pengerjaan projek sistem akan terjadwal dengan baik dan mudah dikontrol. 1.4   Kekurangan Waterfall -  Waktu pengembangan lama, dikarenakan input tahap berikutnya adalah output dari tahap sebelumnya. Jika satu tahap waktunya terhenti, maka waktu keseluruhan pengembangan juga ikut terhenti. -  Biaya mahal, dikarenakanwaktupengembangan yang lama. -  Terkadang perangkat lunak yang dihasilkan tidak akan digunakan karena sudah tidak sesuai dengan permintaan pelanggan. Dikarenakan waktu pengembangan yang lama. Selain itu dikarenakan waterfall merupakan aliran yang linear, sehingga jika permintaan berubah proses tidak dapat diulang lagi. -  Karena tahap-tahapan pada waterfall tidak dapat berulang, maka model ini tidak cocok untuk pemodelan pengembangan sebuah proyek yang besar. 2.    Prototyping 2.1   Pengertian Prototyping didefinisikan sebagai proses pengembangan suatu prototipe secara cepat untuk digunakan terlebih dahulu dan ditingkatkan terus menerus sampai di dapatkan sistem yang utuh. 2.1  Diagram Prototyping 2.2   Proses / Cara Kerja a.    Pengumpulan kebutuhan. Pelanggan dan pengembang bersama-sama mendefinisikan format seluruh perangkat lunak, mengidentifikasikan semua kebutuhan, dan garis besar sistem yangakan dibuat. f.    Desain Tahap ini bertujuan untuk memberikan gambaran apa yang seharusnya dikerjakan dan bagaimana tampilannya. b.   Membangun prototyping. Membangun prototyping dengan membuat perancangan sementara yang berfokus pada penyajian kepada pelanggan (misalnya dengan membuat input dan format output). c.    Evaluasi. Evaluasi ini dilakukan oleh pelanggan apakah prototyping yang sudah dibangun sudah sesuai dengan keinginan pelanggan.Jika sudah sesuai maka langkah selanjutnya akan diambil. Jika tidak prototyping direvisi dengan mengulangi langkah sebelumnya. d.   Pengembangan sistem. Dalam tahap ini prototyping yang sudah di sepakati diterjemahkan ke dalam bahasa pemrograman yang sesuai dan dikembangkan. e.    Menguji sistem. Setelah sistem sudah menjadi suatu perangkat lunak yang siap pakai, harus di tes dahulu sebelum digunakan. Pengujian ini dilakukan dengan White Box, Black Box,Basis Path, pengujian arsitektur dan lain-lain. f.    Menggunakan sistem. Perangkat lunak yang telah diuji dan diterima pelanggan siap untuk digunakan serta di maintain apablia diperlukan. 2.3   Keuntungan Prototyping -  Adanya komunikasi yang baik antara pengembang dan pelanggan. -  Pengembang dapat bekerja lebih baik dalam menentukan kebutuhan pelanggan. -  Pelanggan berperan aktif dalam pengembangan sistem. -  Lebih menghemat waktu dalam pengembangan sistem. -  Penerapan menjadi lebih mudah karena pemakai mengetahui apa yang diharapkannya. 2.4   Kekurangan Prototyping -  Untuk menghemat waktu, biasanya pengembang hanya menggunakan bahasa pemrograman sederhana, yang mungkin rentan dari segi keamanannya. -  Tidak cocok untuk diimplementasikan pada sebuah sistem yang sangat besar dan global, seperti sistem operasi komputer. -  Analisis masalah yang tidak lengkap atau tidak memadai. -  Hubungan pelanggan dengan komputer yang disediakan mungkin tidak mencerminkan teknik perancangan yang baik. -    3.    Iterative Development 3.1  Pengertian Model yang berbasiskan pada kebutuhan terhadap aplikasi secara keberlanjutan untuk menyaring kebutuhan-kebutuhan tersebut dan perkiraan proyek secara keseluruhan. 3.1  Diagram Iterative Development 3.1    Proses / Cara Kerja a.    Hubungan/Komunikasi Aktivitas yang dibutuhkan untuk membangun komunikasi yang efektif antara developer dengan user / customer terutama mengenai kebutuhan dari customer. b.    Perencanaan Aktivitas perencanaan ini dibutuhkan untuk menentukan sumberdaya, perkiraan waktu pengerjaan, dan informasi lainnya yang dibutuhkan untuk pengembangan software. c.      Analisa resiko Aktivitas analisis resiko ini dijalankan untuk menganalisis baik resiko secara teknikal maupun secara manajerial. Tahap inilah yang mungkin tidak ada pada model proses yang juga menggunakan metode iterasi, tetapi hanya dilakukan pada spiral model. d.     Engineering Aktivitas yang dibutuhkan untuk membangun 1 atau lebih representasi dari aplikasi secara teknikal. e.      Construction & Release Aktivitas yang dibutuhkan untuk develop software, testing, instalasi dan penyediaan user / costumer support seperti training penggunaan software serta dokumentasi seperti buku manual penggunaan software. f.      Evaluasi Aktivitas yang dibutuhkan untuk mendapatkan feedback dari customer berdasarkan evaluasi mereka terhadap sistem selama representasi software pada tahap engineering maupun pada implementasi selama instalasi software pada tahap construction and release. 3.2    Keuntungan Iterative Development -       Setiap tahap pengerjaan dibuat prototyping sehingga kekurangan dan apa yang diharapkan oleh client dapat diperjelas dan juga dapat menjadi acuan untuk client dalam mencari kekurangan kebutuhan. -       Lebih cocok untuk pengembangan sistem dan perangkat lunak skala besar. -       Dapat disesuaikan agar perangkat lunak bisa dipakai selama hidup perangkat lunak komputer.  -       Pengembang dan pemakai dapat lebih mudah memahami dan bereaksi terhadap resiko setiap tingkat evolusi karena perangkat lunak terus bekerja selama proses. -       Menggunakan prototipe sebagai mekanisme pengurangan resiko dan pada setiap keadaan di dalam evolusi produk. -       Tetap mengikuti langkah-langkah dalam siklus kehidupan klasik dan memasukkannya ke dalam kerangka kerja iteratif. -       Membutuhkan pertimbangan langsung terhadap resiko teknis sehingga mengurangi resiko sebelum menjadi permaslahan yang serius. 3.3    Kekurangan Iterative Development -       Banyak konsumen (Client) tidak percaya bahwa pendekatan secara evolusioner dapat dikontrol oleh kedua pihak. Model ini mempunyai resiko yang harus dipertimbangkan ulang oleh konsumen dan developer. -       Memerlukan tenaga ahli untuk memperkirakan resiko, dan harus mengandalkannya supaya sukses. -       Belum terbukti apakah metode ini cukup efisien karena usianya yang relatif baru. -       Memerlukan penaksiran resiko yang masuk akal dan akan menjadi masalah yang serius jika resiko mayor tidak ditemukan dan diatur. -       Butuh waktu lama untuk menerapkan paradigma ini menuju kepastian yang absolute. 4.    Rational Unified Proccess 4.1  Pengertian RUP, singkatan dari Rational Unified Process, adalah suatu kerangka proses yang mencakup keseluruhan siklus hidup pengembangan perangkat lunak dan dapat diadaptasi untuk disesuaikan oleh organisasi pengembang dan tim proyek perangkat lunak yang akan memilih elemen proses sesuai dengan kebutuhan mereka. 4.1  Rational Unified Process 4.2  Proses / Cara Kerja a.    Perencanaan Merencanakan projek yang akan di buat b.    Permodelan bisnis Mendeskripsikan struktur dan proses-proses bisnis organisasi. c.    Kebutuhan Mendefinisikan kebutuhan perangkat lunak dengan menggunakan metode use case. d.   Analisis dan perancangan Mendeskripsikan berbagai arsitektur perangkat lunak dari berbagai sudut pandang. e.    Implementasi Menulis kode-kode program dan mengintegrasikan unit-unit programnya. f.     Pengujian Mendeskripsikan kasus uji, prosedur, dan alat ukur pengujian. g.    Deployment Menangani konfigurasi sistem yang akan diserahkan. Apabila tidak sesuai maka akan di evaluasi dengan mengulangi langkah sebelumnya. 4.3  Keuntungan Rational Unified Proccess -  Menyediakan akses yang mudah terhadap pengetahuan dasar bagi anggota tim. -  Menyediakan petunjuk bagaimana menggunakan UML secara efektif. -  Mendukung proses pengulangan dalam pengembangan software. -  Memungkinkan adanya penambahan-penambahan pada proses. -  Memungkinkan untuk secara sistematis mengontrol perubahan- perubahan yangterjadi pada software selama proses pengembangannya. -  Memungkinkan untuk menjalankan test case dengan menggunakan Rational TestManager Tool 4.4  Kekurangan Rational Unified Proccess -  Metodologi ini hanya dapat digunakan pada pengembangan perangkat lunak yangberorientasi objek dengan berfokus pada UML (Unified Modeling Language). -  Membutuhkan waktu yang cukup lama. -  Membutuhkan keahlian yang baik atau yang telah berpengalaman dalam mengembangkan perangkat lunak dalam arti metode ini kurang cocok bagi pemula. -  Diperlukan majaemen yang baik, karena proses pengembangan tidak dapat berulang sebelum menghasilkan suatu produk. 5.    Timeboxing Model 5.1  Pengertian Time boxing adalah proses menunda fitur untuk versi aplikasi di masa mendatang untuk melengkapi versi saat ini sebagai ketepatan waktu. 5.1  Diagram Timeboxing Model 5.2    Proses/Cara Kerja a.    Requirements Mendefinisikan semua kebutuhan perangkat lunak dan sistem yang akan di buat. b.    Build Merancang dan membangun aplikasi sesuai kebutuhan serta menulis kode-kode programnya c.    Deploy Menangani konfigurasi yang di serahkan guna melengkapi versi saat ini. Tahap-tahap tersebut dimasukkan ke dalam timebox dan masing-masing timebox dibagi menjadi urutan tahap tetap di mana setiap tahap melakukan tugas yang jelas (kebutuhan, membangun dan menyebarkan) yang dapat dilakukan secara mandiri dengan durasi waktu setiap tahapan kira-kira sama sehingga mengurangi waktu pengembangan dan rilis produk. 5.3    Keuntungan Timboxing Model -  Mempercepat proses pembangunan dan memperpendek waktu pengiriman. -  Membantu fokus pada pekerjaan dengan waktu yang di tetapkan. -  Cocok untuk mengembangkan proyek-proyek dengan sejumlah fitur dalam periode waktu yang singkat. 5.4    Kekurangan Timeboxing Model -  Menyebabkan pembuat aplikasi frustasi karna harus di selesaikan tepat waktu -  Tidak cocok untuk proyek-proyek di mana seluruh pekerjaan pembangunan tidak dapat dibagi menjadi beberapa urutan dengan durasi yang sama. -  Hanya untuk proyek-proyek jangka pendek, tidak bisa untuk proyek jangka panjang 6.    Extreme Programming and Agile Proccess 6.1    Pengertian merupakan salah satu metodologi dalam rekayasa perangkat lunak yang berfokus pada coding sebagai aktivitas utama di semua tahap pada siklus pengembangan perangkat lunak 6.1  Diagram Extreme Programming and Agile Proccess 6.2    Proses/Cara Kerja a.    Planning Tahap planning dimulai dengan membuat user stories yang menggambarkan output, fitur, dan fungsi-fungsi dari software yang akan dibuat. User stories tersebut kemudian diberikan bobot seperti prioritas dan dikelompokkan untuk selanjutnya dilakukan proses delivery secara incremental.  b.    Design Design di Extreme Programming mengikuti prinsip tetap sederhana. Untuk design yang sulit, Extreme Programming akan menggunaan Spike Solution dimana pembuatan design dibuatlangsung ke tujuannya. Extreme Programming juga mendukung adanya refactoring dimana software system diubah sedemikian rupa dengan cara mengubah stuktur kode dan menyederhanakannya namun hasil dari kode tidak berubah.  c.    Coding Proses coding pada XP diawali dengan membangun serangkaian unit test. Setelah itu pengembang akan berfokus untuk mengimplementasikannya. Dalam Extreme Programmingdiperkenalkan istilah Pair Programming dimana proses penulisan program dilakukan secara berpasangan. Dua orang programmer saling bekerjasama di satu komputer untuk menulis program. d.   Testing Tahap ini dilakukan pengujian kode pada unit test.Dalam Extreme Programming,diperkenalkan XP acceptance test atau biasa disebut customer test. Tes ini dilakukan oleh customer yang berfokus kepada fitur dan fungsi sistem secara keseluruhan. Acceptance test ini berasal dari user stories yang telah diimplementasikan. 6.3    Keuntungan Extreme Programming and Agile Proccess -  Banyak ide baru dan berani mencobanya, berani mengerjakan kembali dan setiap kali kesalahan ditemukan, langsung diperbaiki. -  Mengurangi resiko kegagalan implementasi software dari segi non-teknis -  Kesederhanaan dalam pengkodean dan mengembangkannya kemudian jika diperlukan -  Menjalin komunikasi yang baik dengan client 6.4    Kekurangan Extreme Programming and Agile Proccess -  Developer harus selalu siap dengan perubahan karena perubahan akan selalu diterima. -  Tidak bisa membuat kode yang detail di awal -  Tidak memiliki dokumentasi formal yang dibuat selama pengembangan. -  Perkiraan waktu release dan harga perangkat lunak sulit ditentukan.

Make Google view image button visible again: https://goo.gl/DYGbub